HOW TO USE LXZ80 EMULATOR
========================

The emulator is a shared library, so you can add it to your code
as any other shared library.

If you want to look for an example, see the code of lxzrun, which 
uses this library to simulate a basic Z80


Compiling using the library
===========================
The LDFLAGS is  -llxz80 and the CFLAGS -Ilxz80.h
There is a pkgconfig file installed by default ( lxz80 )


API
====
There are two basic functions you must use 

* z80_init( struct z80interface * interface )
* z80_run()

There is an structure you must fill in to call z80 init

struct z80interface {
	float clock; /* in Mhz, typically 1, 2, 3, 4 */
	void (*io)(struct z80interface *);
	int type;		/* 0: read ram, 1: write ram, 2: read io, 3: write io */
    	uint16_t busaddr;
    	uint8_t  busdata;
};

You must provide a callback function to handle the ram and io requests.
void io ( struct z80interface * interface );

This function will receive the same struct of z80 interface, but with the
type element indicating the function ( ram or io, read or write )

See the code of lxzrun ( main.c ) for an example 


The z80_run
===========
Once z80 init is done, you call this function ONLY ONCE.
This function WILL NEVER RETURN until it finds a HALT signal/instruction. 
If the code running executes a HALT instruction or you send 
the signal HALT the emulation will end. The z80_run will try to run every instruction at the same speed as
it is supposed to be, but currently there is work to do in that area.












